#!/bin/sh
###############################################################################
# BRLTTY - A background process providing access to the console screen (when in
#          text mode) for a blind person using a refreshable braille display.
#
# Copyright (C) 1995-2018 by The BRLTTY Developers.
#
# BRLTTY comes with ABSOLUTELY NO WARRANTY.
#
# This is free software, placed under the terms of the
# GNU Lesser General Public License, as published by the Free Software
# Foundation; either version 2.1 of the License, or (at your option) any
# later version. Please see the file LICENSE-LGPL for details.
#
# Web Page: http://brltty.com/
#
# This software is maintained by Dave Mielke <dave@mielke.cc>.
###############################################################################

. "`dirname "${0}"`/prologue.sh"
addProgramOption d string.anything defaultIdentifier "specify a default identifier"
addProgramOption f string.file outputFile "specify a file in which to write the identifier" "standard output"
addProgramOption s flag quotedString "render the identifier as a quoted string"
addProgramParameter source sourceRoot "top-level directory of source tree"
parseProgramArguments "${@}"

[ -e "${sourceRoot}" ] || semanticError "directory not found: ${sourceRoot}"
[ -d "${sourceRoot}" ] || semanticError "not a directory: ${sourceRoot}"

export GIT_WORK_TREE="${sourceRoot}"
export GIT_DIR="${GIT_WORK_TREE}/.git"

if [ -d "${GIT_DIR}" ]
then
   revisionIdentifier="`git describe --tags --abbrev=8 --dirty='M' --match='BRLTTY-*' 2>/dev/null`"
elif [ -d "${sourceRoot}/.svn" ]
then
   revisionIdentifier="`svnversion -n "${sourceRoot}" 2>/dev/null`"
   [ "${revisionIdentifier}" != "exported" ] || revisionIdentifier=""
else
   logMessage warning "unrecognized source repository type: ${sourceRoot}"
   revisionIdentifier=""
fi

[ -n "${revisionIdentifier}" ] || {
  [ -n "${defaultIdentifier}" ] || semanticError "revision identifier not known"
  revisionIdentifier="${defaultIdentifier}"
}

"${quotedString}" && revisionIdentifier='"'"${revisionIdentifier}"'"'

if [ -z "${outputFile}" ]
then
   echo "${revisionIdentifier}"
else
   if [ -e "${outputFile}" ]
   then
      [ -f "${outputFile}" ] || semanticError "not a file: ${outputFile}"
      [ -r "${outputFile}" ] || semanticError "file not readable: ${outputFile}"

      exec 3<"${outputFile}"
      read <&3 -r firstLine && {
         [ "${firstLine}" != "${revisionIdentifier}" ] || read <&3 -r secondLine || exit 0
      }
      exec 3<&-

      [ -w "${outputFile}" ] || semanticError "file not writable: ${outputFile}"
   else
      outputDirectory="$(dirname "${outputFile}")"
      [ -d "${outputDirectory}" ] || semanticError "not a directory: ${outputDirectory}"
      [ -w "${outputDirectory}" ] || semanticError "directory not writable: ${outputDirectory}"
   fi

   echo "${revisionIdentifier}" >"${outputFile}"
fi

exit 0
